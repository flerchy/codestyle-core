def mark_component(G, node, marked):
    marked[node] = True
    total_marked = 1
    for neighbor in G[node]:
        if neighbor not in marked:
            total_marked += mark_component(G, neighbor, marked)
    return total_marked

def check_connection(G, v1, v2):
    marked = {}
    mark_component(G, v1, marked)
    return v2 in marked

def check_love(G):
    res = []
    for k1 in G:
        for k2 in G[k1]:
            res.append((G[k1][k2], k1, k2))
    res.sort()
    res.reverse()
    return res

def make_path(G, i, j):
    assert check_connection(G, i, j)
    path = [[i]]
    while path:
        k = path.pop(0)
        last = k[-1]
        for node in G[last]:
            if node == j:
                return k+[j]
            path.append(k+[node])

def feel_the_love(G, i, j):
    if not check_connection(G, i, j):
        return None
    love = check_love(G)
    for k in love:
        if check_connection(G, i, k[1]) and check_connection(G, k[2], j):
            return make_path(G, i, k[1]) + make_path(G, k[2], j)

def score_of_path(G, path):
    max_love = -float('inf')
    for n1, n2 in zip(path[:-1], path[1:]):
        love = G[n1][n2]
        if love > max_love:
            max_love = love
    return max_love

G = {'a':{'c':1},
     'b':{'c':1},
     'c':{'a':1, 'b':1, 'e':1, 'd':1},
     'e':{'c':1, 'd':2},
     'd':{'e':2, 'c':1},
     'f':{}}

def test():
    path = feel_the_love(G, 'a', 'b')
    assert score_of_path(G, path) == 2

    path = feel_the_love(G, 'a', 'f')
    assert path == None

W = {'a': {'i': 5.0899999999999999, 'h': 8.5399999999999991, 'b': 2.3199999999999998, 'm': 7.2400000000000002}, 'c': {'q': 2.6899999999999999, 'b': 9.4900000000000002, 'u': 7.1299999999999999, 't': 3.7599999999999998, 'o': 1.6599999999999999}, 'b': {'a': 2.3199999999999998, 'c': 9.4900000000000002, 'u': 6.1600000000000001, 'g': 8.6999999999999993, 'k': 7.25, 'j': 9.7699999999999996, 'm': 5.8099999999999996, 's': 2.7599999999999998, 'o': 3.73, 'n': 7.6799999999999997}, 'e': {'i': 6.2199999999999998, 's': 7.4900000000000002, 'm': 4.2000000000000002}, 'd': {'m': 7.2199999999999998}, 'g': {'b': 8.6999999999999993, 'h': 9.8900000000000006, 'k': 4.4699999999999998, 'm': 0.29999999999999999, 'l': 7.5499999999999998, 'u': 6.9900000000000002}, 'f': {'i': 8.5, 'r': 2.6600000000000001, 't': 9.8200000000000003, 'o': 3.1899999999999999, 'j': 7.2800000000000002}, 'i': {'a': 5.0899999999999999, 'q': 4.71, 'e': 6.2199999999999998, 'f': 8.5, 'h': 1.9099999999999999, 'k': 3.25, 'l': 3.0800000000000001, 'n': 9.75}, 'h': {'a': 8.5399999999999991, 'g': 9.8900000000000006, 'i': 1.9099999999999999, 'm': 2.0, 'q': 7.4900000000000002, 'r': 1.6299999999999999, 'u': 9.1400000000000006}, 'k': {'b': 7.25, 'g': 4.4699999999999998, 'i': 3.25, 'p': 2.4100000000000001, 's': 8.3699999999999992, 'r': 7.5, 'u': 8.9700000000000006}, 'j': {'b': 9.7699999999999996, 'f': 7.2800000000000002, 'm': 5.4699999999999998, 'p': 0.89000000000000001, 's': 5.0300000000000002, 'u': 9.1400000000000006}, 'm': {'a': 7.2400000000000002, 'b': 5.8099999999999996, 'e': 4.2000000000000002, 'd': 7.2199999999999998, 'g': 0.29999999999999999, 'h': 2.0, 'j': 5.4699999999999998, 'l': 8.5199999999999996, 'o': 8.8499999999999996, 'n': 3.8700000000000001, 'q': 5.4900000000000002, 's': 3.4100000000000001, 'r': 3.5}, 'l': {'i': 3.0800000000000001, 'm': 8.5199999999999996, 'g': 7.5499999999999998, 'o': 3.0600000000000001, 'n': 6.0}, 'o': {'c': 1.6599999999999999, 'b': 3.73, 'f': 3.1899999999999999, 'm': 8.8499999999999996, 'l': 3.0600000000000001, 's': 4.25}, 'n': {'i': 9.75, 'b': 7.6799999999999997, 'm': 3.8700000000000001, 'l': 6.0}, 'q': {'i': 4.71, 'h': 7.4900000000000002, 'c': 2.6899999999999999, 'r': 1.54, 'm': 5.4900000000000002}, 'p': {'k': 2.4100000000000001, 'j': 0.89000000000000001}, 's': {'r': 0.16, 'b': 2.7599999999999998, 'e': 7.4900000000000002, 't': 8.0800000000000001, 'u': 3.3399999999999999, 'k': 8.3699999999999992, 'j': 5.0300000000000002, 'm': 3.4100000000000001, 'o': 4.25}, 'r': {'q': 1.54, 's': 0.16, 'u': 0.10000000000000001, 't': 3.5499999999999998, 'f': 2.6600000000000001, 'h': 1.6299999999999999, 'k': 7.5, 'm': 3.5}, 'u': {'c': 7.1299999999999999, 'b': 6.1600000000000001, 'g': 6.9900000000000002, 'h': 9.1400000000000006, 'k': 8.9700000000000006, 'j': 9.1400000000000006, 'r': 0.10000000000000001, 's': 3.3399999999999999}, 't': {'c': 3.7599999999999998, 'r': 3.5499999999999998, 's': 8.0800000000000001, 'f': 9.8200000000000003}}
path = feel_the_love(W, 'g', 'g')
print score_of_path(W, path)
